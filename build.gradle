plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'signing'
    id 'de.chojo.publishdata' version '1.4.0'
    id 'maven-publish'
}

group 'dev.onelitefeather'
archivesBaseName = 'DiffPatch'
version '1.5.4'

targetCompatibility = "17"
sourceCompatibility = "17"
println "Starting build of ${archivesBaseName}, Version: ${version}"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://maven.covers1624.net/' }
}

sourceSets {
    create('gradle')
    main
}

configurations {
    shadow
    implementation.extendsFrom shadow
    gradleImplementation.extendsFrom implementation
}

dependencies {
    shadow 'net.covers1624:Quack:0.4.7.72'
    shadow 'it.unimi.dsi:fastutil:8.3.1'
    shadow 'org.apache.commons:commons-lang3:3.9'
    shadow 'org.apache.commons:commons-compress:1.18'
    shadow 'org.tukaani:xz:1.8'
    shadow 'net.sf.jopt-simple:jopt-simple:5.0.4'
    gradleImplementation sourceSets.main.output
    gradleCompileOnly gradleApi()

    compileOnly 'org.jetbrains:annotations:23.1.0'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

test {
    useJUnitPlatform()
}

def commonManifest = {
    attributes 'Main-Class': 'codechicken.diffpatch.DiffPatch'
}

jar {
    manifest commonManifest
    from file("LICENSE.txt")
    from sourceSets.gradle.output
}

shadowJar {
    minimize()
    manifest commonManifest
    configurations = [project.configurations.shadow]

    //Include license, exclude java9 and maven things.
    from file("LICENSE.txt")
    from sourceSets.gradle.output
    exclude 'META-INF/maven/**'
    exclude 'module-info.class'

    //Relocate all our dependencies into a repack package.
    relocate 'net.covers1624.quack', 'codechicken.repack.net.covers1624.quack'
    relocate 'it.unimi', 'codechicken.repack.it.unimi'
    relocate 'org.apache', 'codechicken.repack.org.apache'
    relocate 'org.tukaani', 'codechicken.repack.org.tukaani'
    relocate 'joptsimple', 'codechicken.repack.joptsimple'
    //Transform joptsimple properties files.
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
        paths << "joptsimple/ExceptionMessages.properties"
        paths << "joptsimple/HelpFormatterMessages.properties"
        keyTransformer = { key ->
            key.replaceAll('^(joptsimple\\..*)$', 'codechicken.repack.$1')
        }
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    from file("LICENSE.txt")
}

signing {
    def signingKey = findProperty("onelitefeatherSigningKey")
    def signingPassword = findProperty("onelitefeatherSigningPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}

// configure publish data
publishData {
    useEldoNexusRepos()
    // We publish everything of the java component, which includes our compiled jar, sources and javadocs
    publishComponent("java")
}

publishing {
    publications.create<MavenPublication>("maven") {
        // Configure our maven publication
        publishData.configurePublication(this)
    }

    repositories {
        // We add EldoNexus as our repository. The used url is defined by the publish data.
        maven {
            authentication {
                credentials(PasswordCredentials::class) {
                    // Those credentials need to be set under "Settings -> Secrets -> Actions" in your repository
                    username = System.getenv("NEXUS_USERNAME")
                    password = System.getenv("NEXUS_PASSWORD")
                }
            }

            name = "EldoNexus"
            setUrl(publishData.getRepository())
        }
    }
}
